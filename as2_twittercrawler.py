# -*- coding: utf-8 -*-
"""as2-twittercrawler.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1iFR4YJuN2YMrK94Q4Dvlb36KxG79ia1s
"""

# -*- coding: utf-8 -*-
"""470570Twitter.ipynb

Automatically generated by Colaboratory.

"""

import tweepy
import time
from datetime import date
from datetime import datetime
from pytz import timezone

from google.colab import files

# save your twitter developer account API key and secret and access key and secret in a txt file
# make sure there are no extra white space in your txt file
# upload this text file to Google Colab:

txtfile = files.upload()
keys =  txtfile.get('twkeys.txt').splitlines()

# test your keys and secrets are correct or not:

apiKey = keys[0]
apiKeySecret = keys[1]
accessToken = keys[2]
accessTokenSecret = keys[3]
auth = tweepy.OAuthHandler(apiKey, apiKeySecret)
auth.set_access_token(accessToken, accessTokenSecret)
api = tweepy.API(auth)

try:
  api.verify_credentials()
  print("verification successful!")  
except: 
  print("authentication error")  # if keys are NOT correct, you should see error


# now you can work with twitter using twitter API:!!

#userids = [57741058, 4802800777, 1037141442]
usernames = ["nickloaf_", "chrisbus7", "geeksforgeeks", "twitter", "github"]

users = api.lookup_users(screen_names = usernames)
for user in users:
  
  print("\nUser name: ", user.name)
  print("Screen name: ", user.screen_name)
  print("User ID: ", user.id_str)
  print("Location: ", user.location)
  print("User description: ", user.description)
  print("Number of followers: ", user.followers_count)
  # changed to following which is what friends method gives, number of actual friends printed below
  print("Number of following: ", user.friends_count)
  print("Number of tweets: ", user.statuses_count)
  print("User URL: ", user.url)

  # NUMBER 2 - FRIENDS AND FIRST TWO FOLLOWERS
  # getting the followers list
  followersList = api.followers_ids(user.screen_name)  # How about followers_ids? This should work.
  print(user.screen_name + " has " + str(len(followersList)) + " followers (5000 means method hit max).")
  followersSet = set(followersList)

  followingList = api.friends_ids(user.screen_name)
  print(user.screen_name + " has " + str(len(followingList)) + " following.")
  followingSet = set(followingList)

  friends = followersSet.intersection(followingSet)

  print("Number of friends and screen names (based on set of intersection of followers and following):" + str(len(friends)))
  for friend in friends:
    print(api.get_user(friend).screen_name)

  print("First 20 followers: ")
  for follower in api.followers(user.screen_name):
    print(follower.screen_name)



# NUMBER 3 - OHIO WEATHER TWEETS AND DAYTON TWEETS

# 3A - ohio weather tweets
queryTopic = 'Ohio weather'
# weatherTweets = [tweet for tweet in tweepy.Cursor(api.search, q=queryTopic, lang='en', result_type="mixed", count=50).items(1)]
weatherTweets = [tweet for tweet in tweepy.Cursor(api.search, q=queryTopic, lang='en', result_type="mixed").items(50)]

for tweet in weatherTweets:
  print(tweet.text, "\n")


# 3B - dayton region tweets
# point_radius = [-84.191605, 39.758949, 25]
daytonTweets = [tweet for tweet in tweepy.Cursor(api.search, geocode="39.758949,-84.191605,25mi").items(50)]

for tweet in daytonTweets:
  print(tweet.text, "\n")


# NUMBER 4 - if it's a gameday for Dayton Men's Basketball, get the top 25 tweets about Dayton basketball at 4pm
# today = date.today()
tz = timezone('EST')
today = datetime.now(tz)
currentMonth = str(today.month)
currentDay = str(today.day)
currentYear = str(today.year)
currentDate = currentMonth + "-" + currentDay + "-" + currentYear
# print(currentDate)

# tz = timezone('EST')
now = datetime.now(tz)
time = now.strftime("%H:%M")
# print(time)

gamedays = ["11-11-2022", "11-15-2022", "11-19-2022", "11-23-2022", "11-24-2022", "11-25-2022", "11-30-2022", "12-03-2022", "12-07-2022", "12-10-2022", "12-17-2022", "12-20-2022", "12-28-2022", "12-31-2022", "01-04-2023", "01-10-2023", "01-13-2023", "01-17-2023", "01-21-2023", "01-25-2023", "01-28-2023", "01-31-2023", "02-04-2023", "02-07-2023", "02-10-2023", "02-17-2023", "02-22-2023", "02-25-2023", "02-28-2023", "03-03-2023"]

for gameday in gamedays:
  if currentDate == gameday:
    if time == "16:00":
      queryTopic = "Dayton basketball"
      daytonBBTweets = [tweet for tweet in tweepy.Cursor(api.search, q=queryTopic, lang='en', result_type="mixed").items(25)]

      print("Here's your gameday feed!\n")
      for tweet in daytonBBTweets:
        print(tweet.text, "\n")